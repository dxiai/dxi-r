[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Einführung in die Datenwissenschaft mit R",
    "section": "",
    "text": "Vorwort\nWork in Progress\n\n\nCopyright\nDieses Werk ist lizenziert unter einer Creative Commons Namensnennung - Nicht-kommerziell - Weitergabe unter gleichen Bedingungen 4.0 International Lizenz (CC-BY-NC-SA). Details zur Nutzungsbedingungen und dem Copyright finden sich unter createivecommons.org.\n2023, Christian Glahn, Zurich, Switzerland"
  },
  {
    "objectID": "kapitel/einleitung/kapitel.html#motivation-und-ausgangslage",
    "href": "kapitel/einleitung/kapitel.html#motivation-und-ausgangslage",
    "title": "1  Einleitung",
    "section": "1.1 Motivation und Ausgangslage",
    "text": "1.1 Motivation und Ausgangslage"
  },
  {
    "objectID": "kapitel/einleitung/kapitel.html#base-r-und-tidy-r",
    "href": "kapitel/einleitung/kapitel.html#base-r-und-tidy-r",
    "title": "1  Einleitung",
    "section": "1.2 Base R und Tidy R",
    "text": "1.2 Base R und Tidy R\nR ist eine Programmiersprache, die durch Funktionsbibliotheken erweitert wird. Beim Starten von R wird zuerst nur das Basissystem geladen. Das R-Basissystem besteht aus den eingebauten Sprachelementen und Funktionen sowie aus den Bibliotheken base, compiler, datasets, grDevices, graphics, grid, methods, parallel, splines, stats, stats4, tcltk, tools, translations, and utils. Alle Funktionen dieser Bibliotheken stehen damit nach dem Start von R sofort bereit. Diese Funktionen heissen im R-Jargon Base R. Dieses Basissystem stellt bereits alle Funktionen für das statistische Programmieren bereit.\nBase R verwendent sehr viele Idiome als Funktionsnamen, aus denen sich nicht intuitiv erschliesst, was eine Funktion leistet. Ausserdem wurden im Laufe der Entwicklung immer wieder Funktionen dem Basissystem hinzugefügt, die sich nicht konsistent in das bestehende System aus Funktionen integrieren. Als Beispiel sollen die Funktionen eapply(), lapply(), sapply(), tapply() und vapply() sowie replicate() und rep() dienen. Bis auf replicate() sehen die Funktionsnamen ähnlich aus, werden aber in unterschiedlichen Kontexten verwendet und auf unterschiedliche Weise aufgerufen. replicate() und rep() haben einen ähnlichen Funktionsnamen und in der Beschreibung dienen beide Funktionen der replikation. Die Funktion replicate() ist aber eine Variante der Funktion lapply() mit ähnlicher Syntax und rep() nicht.\nBeim Erlernen von Base R müssen die Kernsyntax der Programmiersprache, die Verwendung der Idiome mit ihren passenden Kontexten und Anwendungen sowie alle Widersprüche erlernt werden. Für Programmierneulinge erscheinen Programme in Base R sehr kyptisch und wenig intuitiv. Selbst erfahrenen R-Entwickler:innen erschliesst sich die Funktionsweise einiger Base R-Programme erst nach dem Studium der zugehörigen Bibliotheksdokumentation.\nMit zunehmender Bedeutung der Datenwissenschaften, wurden die Inkonsistenzen von Base R zum Hindernis für komplexe Anwendungen und Analysen. Ausgehend von einer konsistenten Syntax für die Datenvisualisierung wurden nach und nach R-Bibliotheken für eine konsistente und koherente Datentransformation und -Auswertung bereitgestellt. Diese Bibliotheken stellen Daten und Datenströme in das Zentrum der Programmierung. Durch selbsterklärende Funktionsnamen, das zusammenfassen in Funktionsgruppen und einheitliche Logik für Funktionsaufrufe bilden diese Bibliotheken einen R-Dialekt, der als tidy R bezeichnet wird. R-Programme sind auch für unerfahrende R-Interessierte deutlich intuitiver zu verstehen, wenn sie mit den tidy R Konzepten entwickelt wurden, als vergleichbare Base R Varianten. Durch den datenzentrierten Zugang lässt sich tidy R wesentlich leichter erlernen als Base R.\nDen Kern von tidy R bildet die Bibliothek tidyverse, die die wichtigsten Funktionen für die Datentransformation und die Datenvisualisierung zusammenfasst. Sie besteht aus den Unterbibliotheken dplyr, forcats, ggplot2, purrr, readr, tibble und tidyr.\nWichtige ergänzende Funktionen für die Statistik und das statistische Modellieren werden durch die Bibliotheken rstatix und tidymodels bereitgestellt.\nIn diesem Buch werden alle Konzepte datenzentrisch mit dem tidy R Ansatz erarbeitet. Base R Konzepte, Operatoren und Funktionen werden nur verwendet, wenn diese nicht im Widerspruch zu tidy R stehen. In diesen Fällen werden diese nicht gesondert als Base R hervorgehoben."
  },
  {
    "objectID": "kapitel/einleitung/kapitel.html#organisation-dieses-buchs",
    "href": "kapitel/einleitung/kapitel.html#organisation-dieses-buchs",
    "title": "1  Einleitung",
    "section": "1.3 Organisation dieses Buchs",
    "text": "1.3 Organisation dieses Buchs"
  },
  {
    "objectID": "kapitel/tool-chain/installation.html#r-installieren",
    "href": "kapitel/tool-chain/installation.html#r-installieren",
    "title": "2  Tool Chain",
    "section": "2.1 R installieren",
    "text": "2.1 R installieren\nDie Installation von R ist einfach. Auf der R-Project Webseite kann das Installationspaket für das jeweilige Betriebssystem heruntergeladen werden. Die Installation erfolgt wie gewohnt über den Installer.\n\n\n\n\n\n\nMacOS\n\n\n\nViele R-Bibliotheken benötigen zusätzliche Komponenten, damit sie funktionieren. Diese Komponenten müssen zusätzlich kompiliert werden. Unter MacOS benötigt R dafür die App XCode und die XCode Command Line Tools.\nBeide Komponenten stehen unter MacOS kostenlos zur Verfügung. XCode wird wie gewohnt über Apple’s AppStore installiert. Nach der Installation muss XCode einmal gestartet werden, um die Lizenzbedingungen zu akzeptieren. Anschliessend sollten die notwendigen Ergänzungen für die Entwicklung unter MacOS installiert werden.\nNach erfolgreicher Installation erscheint eine Abfrage, zum Starten eines neuen Projekts (Abbildung 2.1).\n\n\n\nAbbildung 2.1: XCode Start Dialog\n\n\nDamit ist die Installation von XCode abgeschlossen. Nun folgt die Installation der Kommandozeilenwerkzeuge. Dazu muss ein Terminal geöffnet werden.\n\n\n\nAbbildung 2.2: MacOS Terminal\n\n\nIm Terminal muss das folgende Kommando eingegeben und anschliessend mit der Eingabe-Taste abgeschlossen werden.\nxcode-select --install\nAnschliessend folgen mehrere Abgragen zur Installation der XCode-Command-Line Komponenten. Nach der Installation kann das Terminal und XCode wieder geschlossen werden.\nXCode wird regelmässig grösseren Änderungen unterzogen. Diese Änderungen erfolgen oft im April, Juni und September. Nach einem Update von XCode müssen die Command-Line Tools ebenfalls erneut installiert werden. Ausserdem ist es notwendig, dass die Lizensbedingungen erneut akzeptiert werden, sonst lassen sich R-Bibliotheken nicht mehr kompilieren.\n\n\n\n2.1.1 Überprüfen der Installation\nNach erfolgreicher Installation sollte R mit den Werkzeugen der Laufzeitumgebung auf dem Rechner vorhanden sein. Die Installation lässt sich mithilfe des Terminals (MacOS) oder der Powershell (Windows) überprüfen.\n\n\n\n\n\n\nMacOS vs. Windows\n\n\n\nUnter MacOS muss der folgende Befehl eingegeben und mit der Eingabe-Taste abgeschlossen werden.\nRscript -e 'sessionInfo()'\nIn der Windows Powershell muss der Befehl wie folgt aussehen:\nRSCRIPT.EXE -e 'sessionInfo()'\n\n\nBei erfolgreicher Installation erscheint eine Meldung im Terminal, die der folgen Meldung ähnelt. Die Funktion sessionInfo() zeigt die Versionsinformationen der aktuellen R-Installation an.\nR version 4.3.1 (2023-06-16)\nPlatform: aarch64-apple-darwin22.4.0 (64-bit)\nRunning under: macOS Ventura 13.5.2\n\nMatrix products: default\nBLAS:   /opt/homebrew/Cellar/openblas/0.3.23/lib/libopenblasp-r0.3.23.dylib \nLAPACK: /opt/homebrew/Cellar/r/4.3.1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] de_DE.UTF-8/de_DE.UTF-8/de_DE.UTF-8/C/de_DE.UTF-8/de_DE.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n[1] compiler_4.3.1\n\n\n2.1.2 Erste Schritte\nR ist eine interaktive Sprache und besteht im Kern aus einer sog. Laufzeitumgebung. Diese Umgebung übersetzt R-Syntax in Maschinensprache und führt vollständige Ausdrücke direkt aus. Innerhalb der Laufzeitumgebung steht ein einfacher Zeileneditor zur Verfügung, mit dem Eingaben erstellt und manipuliert werden können.\n\n\n\n\n\n\nMacOS vs Windows\n\n\n\nDie R-Laufzeitumgebung wird auf MacOS-Systeme im Terminal mit dem Kommando R und Eingabetaste gestartet.\nAuf Windows-Systemen wird die Laufzeitumgebung in der Powershell mit dem Kommando R.EXE aufgerufen.\n\n\nR verwendet für alle Operationen Funktionen. Die meisten R-Funktionen haben einen Namen und werden mit runden Klammern aufgerufen. Ein Beispiel ist die Funktion quit(), mit der die R-Laufzeitumgebung verlassen wird. Funktionen werden in die Laufzeitumgebung eingegeben und durch das Drücken der Eingabetaste ausgeführt.\nquit()\nDieser Funktionsaufruf führt zu der Abfrage, ob die aktuelle Arbeitsumgebung gesichert werden soll.\nSave workspace image? [y/n/c]:\nWeil nichts geändert wurde, kann diese Frage mit n für No beantwortet und mit einem Druck auf die Eingabetaste übergeben werden. Anschliessend wird die Laufzeitumgebung geschlossen und kehrt auf die Kommandozeile des Betriebssystems zurück.\nNeben der interaktiven Laufzeitumgebung wird R mit dem Programm Rscript ausgeliefert. Mit Rscript können Dateien mit R-Code zusammenhängend ausgeführt werden.\n\nDefinition 2.1 Ein R-Script ist eine Datei, die nur R-Code enthält. Ein R-Script hat per *konvention die Dateiendung .r\n\n\n\n\n\n\n\nMacOS vs. Windows\n\n\n\nDas Programm Rscript heisst unter Windows RSCRIPT.EXE.\n\n\n\nBeispiel 2.1 (Ausführen eines R-Scripts im MacOS Terminal)  \nRscript my-rscript.r\n\nRscript kann ausserdem einzelne Code-Zeilen ausführen, ohne in die interaktive Laufzeitumgebung wechseln zu müssen. Diese Funktion ist praktisch, um eine einfache Operation auszuführen, wie z.B. eine Bibliothek zu installieren (s. Kapitel 2.3)."
  },
  {
    "objectID": "kapitel/tool-chain/installation.html#grafische-oberflächen-für-r",
    "href": "kapitel/tool-chain/installation.html#grafische-oberflächen-für-r",
    "title": "2  Tool Chain",
    "section": "2.2 Grafische Oberflächen für R",
    "text": "2.2 Grafische Oberflächen für R\nR hat keine eigene grafische Benutzeroberfläche und ist auf eine externe Entwicklungsumgebung angewiesen. Eine solche Entwicklungsumgebung muss zusätzlich zu R installiert werden, damit die Programmierung und die Analyse vereinfacht wird. Die am häufigsten eingesetzten Entwicklungsumgebungen für R sind:\n\nRStudio\nJupyter Notebooks\nVisual Studio Code\n\n\n\n\n\n\n\nHinweis\n\n\n\nIn diesem Buch wird Visual Studio Code für alle Beispiele mit Benutzeroberfläche verwendet. Die Bedienung von RStudio oder JupyterLab unterscheidet für die Arbeit in diesem Buch sich nur marginal von Visual Studio Code.\n\n\nEine R-Entwicklungsumgebung ist unabhängig von der R-Laufzeitumgebung, die die Programmiersprache bereitstellt. Es ist also möglich, R-Programme in der einen Umgebung zu entwickeln und später in einer anderen weiterzubearbeiten und auszuführen.\nDie Grundkomponenten einer Entwicklungsumgebung sind immer gleich (Abbildung 2.3):\n\nCode-Editor, mit dem Dokumentation und analytische Funktionen geschrieben werden.\nDatei-Browser, über den alle Dateien eines Projekts verwaltet werden können.\n\nLaufzeit-Console, über die die R-Laufzeitumgebung zugänglich ist.\nDatenbetrachter, zur Auswertung von generierten Datenstrukturen.\nVisualisierungsbetrachter, zur Anzeige von Datenvisualisierungen.\n\n\n\n\nAbbildung 2.3: Komponenten einer datenzentrischen Entwicklungsumgebung am Beispiel von Visual Studio Code\n\n\nNeben diesen Komponenten existieren oft zustätzliche Werkzeuge und Ansichten.\n\nWerkzeuge zur Versionierung von Code und Daten.\nDokumentation für R und ergänzende Bibliotheken.\nInstallationsunterstützung von Bibliotheken.\n\n\n2.2.1 RStudio\nRStudio ist eine integrierte Analyseumgebung, die speziell für die Entwicklung von R-Programmen und R-Analysen entwickelt wurde. Das System ist auf R-spezifische Arbeitsabläufe zur Datenanalyse ausgerichtet und unterstützt neben R auch die Programmiersprache Python.\nRStudio verwendet eine spezielle Version von Markdown, um R-Code-Fragmente auszuführen und die Ergebnisse in das Dokument einzubinden. Dieses Format heisst R-Markdown.\nVon RStudio existiert auch eine Web-basierte Version, welche online Zusammenarbeit und online Publikationen unterstützt.\n\n\n2.2.2 JupyterLab\nJupyterLab ist eine Web-basierte Analyseumgebung, die ursprünglich für die Programmiersprache Python entwickelt wurde. JupyterLab wurde speziell für Datendokumente entwickelt und unterstützt ausschliesslich Jupyter Notebooks als Austauschformat für Analysen.\nJupyterLab unterstützt neben Python viele andere Programmiersprachen. Dazu gehört auch R. JupyterLab integriert Programmiersprachen durch spezielle Kernel, die Code-Fragmente auswerten und die Ergebnisse in ein Datendokument einbinden.\nIn der Praxis werden Jupyter Notebooks und JupyterLab oft eingesetzt, wenn sehr umfangreiche Daten analysiert werden sollen, die nicht ohne weiteres über das Internet übertragen werden können oder dürfen.\n\n\n2.2.3 Visual Studio Code\nVisual Studio Code ist ein kostenloser Code-Editor mit vielen Erweiterungen für fast alle Programmiersprachen und Arbeitsumgebungen. Die Erweiterung für R ist ebenfalls kostenlos und kann über den Extension Manager installiert werden.\nIm Gegensatz zu R-Studio ist Visual Studio Code in erster Linie ein Code-Editor und bietet für R eine vergleichsweise einfache Entwicklungsumgebung. Der grösste Unterschied zwischen Visual Studio Code und RStudio oder JupyterLab ist der wenig differenzierte Variablen-Inspektor.\nIn Visual Studio Code lassen sich u.a. auch R-Markdown-Dokumente und Jupyter Notebooks bearbeiten."
  },
  {
    "objectID": "kapitel/tool-chain/installation.html#sec-install-libs",
    "href": "kapitel/tool-chain/installation.html#sec-install-libs",
    "title": "2  Tool Chain",
    "section": "2.3 R-Bibliotheken installieren",
    "text": "2.3 R-Bibliotheken installieren\nR verfügt über einen sehr grossen Fundus an Lösungen für das statistische Rechnen. Diese Lösungen werden als Bibliotheken bereitgestellt und über das Comprehensive R Archive Network (CRAN) geteilt. CRAN ist ein integraler Bestandteil von R. Weil R jedoch über sehr viele Bibliotheken verfügt, werden diese nicht mit R ausgeliefert, sondern müssen bei Bedarf installiert werden. Hierzu liefert R die Funktion install.packages() mit. Diese Funktion teilt R mit, eine Bibliothek mit einem bestimmten Namen zu installieren.\n\nBeispiel 2.2 (Funktions-Schema von install.packages())  \ninstall.packages(package_name)\n\nIn diesem Buch werden neben den R-Basisfunktionen fast ausschliesslich die Funktionen der tidyverse-Bibliothek behandelt. Die tidyverse-Bibliothek erweitert die R-Syntax um moderne Sprachkonzepte und vereinheitlicht viele Funktionen für Standardaufgaben.\n\n\n\n\n\n\nHinweis\n\n\n\nStreng genommen ist die tidyverse-Bibliothek eine R-Bibliothek im engeren Sinn. Vielmehr vereint sie die häufig zusammen eingesetzten Biblliotheken ggplot2 (Kapitel 18), dplyr (Kapitel 14), tidyr (Kapitel 16), readr (Kapitel 6), stringr (Kapitel 8), forcats (Kapitel 9), lubridate und purrr (Kapitel 7) sowie etliche weitere Module für die tägliche Arbeit mit Daten.\n\n\nWeil die tidyverse-Bibliothek eine zentrale Bedeutung im R-Umfeld hat, ist es an dieser Stelle sinnvoll, die tidyverse-Bibliothek mithilfe von Rscript zu installieren.\n\nBeispiel 2.3 (Installieren der tidyverse-Bibliotheken unter MacOS)  \nRscript -e 'install.packages(\"tidyverse\")'\n\nBei der ersten Installation einer Bibliothek fragt R nach einem CRAN-Mirror. Hier sollte ein geografisch nahe Quelle gewählt werden, um die Ladezeiten zu verringern.\nMit Visual Studio Code können R-Bibliotheken auch mit der Arbeitsumgebung installiert werden. Dazu wird die R-Erweiterung geöffnet und im Bereich Help Pages die Option Install CRAN Package gewählt. Anschliessend wird der gewünschte Bibliotheksname in der interaktiven Suche eingegeben und mit der Eingabetaste ausgewählt (Abbildung 2.4).\n\n\n\nAbbildung 2.4: Installation der tidyverse-Bibliothek in Visual Studio Code"
  },
  {
    "objectID": "kapitel/tool-chain/hilfe.html#help",
    "href": "kapitel/tool-chain/hilfe.html#help",
    "title": "3  Hilfe bekommen",
    "section": "3.1 help()",
    "text": "3.1 help()\nDie help()-Funktion ist der erste Anlaufpunkt, um mehr über eine Funktion zu erfahren.\nR-Funktionen sind in der Regel sehr ausführlich dokumentiert. Falls Sie Details über die Arbeitsweise einer Funktion erfahren möchten, können Sie die Dokumentation einer Funktion mit der help()-Funktion abrufen. Dazu rufen Sie diese Funktion wie jede andere R-Funktion auf.\nDie help()-Funktion ist Teil von Base R und ist in jeder Umgebung verfügbar.\nDie Funktion erwartet den gewünschten Funktionsnamen. help() kann der Funktionsname direkt oder als Zeichenkette als Parameter übergeben werden. D.h. die beiden folgenden Operationen haben den gleichen Effekt und zeigen die Dokumentation der Funktion read.csv an.\n\nBeispiel 3.1 (Hilfe anzeigen)  \nhelp(read.csv)\nhelp(\"read.csv\")\n\nIn Visual Studio Code ist es nicht notwendig, die help()-Funktion aufzurufen, weil die Hilfe direkt in die Arbeitsumgebung integriert ist. In R-Scirpten reicht es, den Mauszeiger über eine Funktion zu bewegen. Visual Studio Code zeigt dann die Hilfe direkt im Editor an (Abbildung 3.1). Diese Darstellung wird als Inline-Hilfe bezeichnet.\n\n\n\nAbbildung 3.1: Inline Anzeige einer R-Funktionsdokumentation in Visual Studio Code\n\n\nNeben der Inline-Hilfe lassen sich alle Funktionen der installierten R-Bibliotheken auch über den Abschnitt Help Pages der R-Erweiterung zugreifen. Dort findet sich unter dem letzten Punkt Help Topics by Packages die Dokumentation für alle auf dem Computer installierten Bibliotheken. Der erste Unterpunkt für jede Bibliothek ist der Index, der alle Dokumente für eine Bibliothek auflistet (Abbildung 3.2). Nach dem Installieren einer Bibliothek sollte diese Seite aufgerufen werden, um sich mit der installierten Version vertraut zu machen.\n\n\n\n\n\n\nAchtung\n\n\n\nIm Internet finden sich viele Materialien zur Verwendung einzelner Bibliotheken. Oft beziehen sich diese Materialien auf ältere Versionen der jeweiligen Bibliothek. Damit ist nicht sichergestellt, dass die beschriebenen Techniken der richtigen Vorgehensweise entsprechen. Deshalb sollte immer die offizielle Dokumentation der installierten Bibliotheken zur Überprüfung der beschriebenen Methoden herangezogen werden.\n\n\n\n\n\nAbbildung 3.2: Index der Dokumentation für die Bibliothek dplyr\n\n\n\n3.1.1 Aufbau von Funktionsdokumentationen\nDie meisten R-Bibliotheken folgen einer Konvention zur systematischen Dokumentation von Funktionen. Jede Funktionsdokumentation besteht aus den folgenden Teilen:\n\nBeispielen für den Aufruf der Funktion\nBeschreibung aller Funktionsparameter\nEiner detaillierten Funktionsbeschreibung\nBeispielen\n\nDie Beispiele zeigen typische Aufrufe der jeweiligen Funktion und finden sich immer am Ende der Dokumentation. Es lohnt sich häufig zuerst die Beispiele anzusehen und danach die Funktionsdetails zu lesen."
  },
  {
    "objectID": "kapitel/tool-chain/hilfe.html#vignettes",
    "href": "kapitel/tool-chain/hilfe.html#vignettes",
    "title": "3  Hilfe bekommen",
    "section": "3.2 Vignettes",
    "text": "3.2 Vignettes\nViele R-Bibliotheken haben komplexe Anwendungen. Diese Anwendungen werden in sogenannten Vignettes beschrieben. Eine Vignette ist eine ausführliche Beschreibung einer Funktion oder des Zusammenspiels mehrerer Funktionen mit nachvollziehbaren Beispielen.\nSie können sich die verfügbaren Vignettes für eine Bibliothek mit der Operation vignette(package = bibliotheksname) anzeigen lassen. Wenn Sie z.B. alle Vignettes für die dplyr Bibliothek anzeigen lassen möchten, dann geben Sie vignette(package = \"dplyr\") ein. Das Ergebnis ist die Liste der verfügbaren Vignettes für diese Bibliothek.\nWenn Sie das gesuchte Thema gefunden haben, dann können Sie sich die Vignette mit dem folgenden Befehl anzeigen lassen: vignette(thema, package = bibliotheksname)\n\n\n\nAbbildung 3.3: Index der dplyr Anleitungen\n\n\nIn Visual Studio Code sind alle Vignettes einer Bibliothek (Abbildung 3.3) über deren Dokumentationsindex (Abbildung 3.2) erreichbar. Dadurch lassen sich Anleitungen oft leichter finden."
  },
  {
    "objectID": "kapitel/tool-chain/hilfe.html#cheat-sheets",
    "href": "kapitel/tool-chain/hilfe.html#cheat-sheets",
    "title": "3  Hilfe bekommen",
    "section": "3.3 Cheat Sheets",
    "text": "3.3 Cheat Sheets\nDie tidyverse-Bibliotheken bieten zusätzlich Spickzettel für die wichtigsten Funktionen und Techniken für eine Bibliothek auf zwei Seiten. Diese Spickzettel werden auch als Cheat Sheets bezeichnet. Sie können diese Cheat Sheets doppelseitig ausdrucken und als Schnellreferenz verwenden.\nIm Git-Repository rstudio/cheatsheets finden sich Spickzettel und Kurzreferenzen viele R-Bibliotheken.\n\n\n\n\n\n\nAchtung\n\n\n\nDie Spickzettel sind nicht Teil der Dokumenation einer Bibliothek und werden nicht mit ihr gepflegt.\nEin Spickzettel ersetzt nicht die Dokumentation! Gelegentlich verweisen Spickzettel auf stark veraltete Praktiken. Es ist also immer ein Vergleich mit der offiziellen Dokumentation notwendig.\n\n\nDie folgenden Spickzettel unterstützen die Arbeit mit diesem Buch:\n\nDatenimport\nDatenvisualisierung (ggplot2)\nDatentransformation (dplyr)\nDatenbereinigung (tidyr)\nVektorfunktionen (purrr)\nZeichenketten (stringr)\nFaktoren (forcats)\nDatumswerte (lubridate)"
  },
  {
    "objectID": "kapitel/daten-organisieren/kapitel.html",
    "href": "kapitel/daten-organisieren/kapitel.html",
    "title": "[4  Dokumentation]{#sec-chapter-dokumentation’ .quarto-section-identifier}",
    "section": "",
    "text": "Work in Progress\n\n\n\n\n\n\n\nDefinition 4.1 Ein Datendokument ist ein Dokument, dass Datentransformationen, -Visualisierungen und -Auswertungen in die Dokumentation integriert.\n\nDatendokumente können für Labor- oder Projektberichte verwendet werden.\n\nR-Markdown\nJupyter Notebooks\n\nDaten Dokumente verbinden sog. Markdown-Text mit Code-Fragmenten, so dass die Ausgabe der Code-Fragmente direkt Teil des Berichts wird.\nFür die Publikation von Berichten sind diese Systeme nicht geeignet, sondern müssen durch zusätzliche Tools ergänzt werden.\n\nQuarto\nJupyter Books\n\nDiese zusätzlichen Tools ergänzen Datendokumente um zusätzliche Funktionen. Dazu gehören Querverweise, Verzeichnisse oder Zitieren. Ausserdem können diese System Berichte in übliche Publikationsformaten, wie HTML oder PDF, produzieren."
  },
  {
    "objectID": "kapitel/datentypen/kapitel.html",
    "href": "kapitel/datentypen/kapitel.html",
    "title": "5  Datentypen",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/daten-importieren-exportieren/kapitel.html#daten-importieren",
    "href": "kapitel/daten-importieren-exportieren/kapitel.html#daten-importieren",
    "title": "6  Importieren und Exportieren",
    "section": "6.1 Daten importieren",
    "text": "6.1 Daten importieren\nDas Einlesen von Datendateien ist ein zentraler Bestandteil von R, weil es die Voraussetzung für die statistische Programmierung bildet. Diese Funktionen gehen jedoch nicht sehr sparsam mit dem Arbeitsspeicher unseres Computers um, sodass sehr grosse Datenmengen immer wieder zu Problemen führen.\nDie readr-Bibliothek ersetzt die Base R-Funktionen zum Einlesen von Dateien durch flexiblere und effizientere Funktionen. Diese Funktionen können mit grösseren Datenmengen umgehen und schonen den verfügbaren Arbeitsspeicher. Deshalb sind die readr-Funktionen den jeweiligen Gegenstücken von Base R vorzuziehen.\n\n6.1.1 Dateitypen\nFür den Austausch von Stichproben stehen verschiedene Dateiformate zur Verfügung. Diese Dateiformate unterscheiden sich durch die Strategie, mit der die Werte in den einzelnen Tabellenzellen unterschieden werden.\nDie wichtigsten Formate sind:\n\nTabulator getrennte Werte (TSV, tabulator-separated values)\nKomma getrennte Werte (CSV, comma-separated values)\nExcel Tabellen (via readxl-Bibliothek)\nFixformat Tabellen (FWF, fixed-width format)\nR-Datendateien (RDS, R-data structure)\n\nDiese Dateien können wir mit den folgenden Funktionen einlesen.\n\n\n\n\n\n\n\n\nFormat\ntidy R\nBase R\n\n\n\n\ntxt (ganze Datei)\nread_file()\nreadChar() + file.info()\n\n\ntxt (zeilenweise)\nread_lines()\nreadLines() + file()\n\n\ncsv (mit , als Trennzeichen)\nread_csv()\nread.csv()\n\n\ncsv (mit ; als Trennzeichen)\nread_delim() oder read_csv2()\nread.csv2()\n\n\ntsv\nread_tsv()\nread.table()\n\n\nxls (Excel Arbeitsmappen mit readxl)\nread_excel()\n-\n\n\nFWF\nread_fwf()\n-\n\n\nRDS\nread_rds()\nreadRDS()\n\n\n\nDie Base R Funktionen read.table(), read.csv und read.csv2() importieren Zeichenketten als Faktoren (s. Kapitel 5). Damit können diese Werte nicht direkt als Zeichenketten behandelt werden. Diese automatische Behandlung entfällt bei den jeweiligen tidy R Varianten. Dadurch lassen sich Daten intuitiver bearbeiten.\n\n\n\n\n\n\nAchtung\n\n\n\nIn der Schweiz kann das CSV-Format zu Verwirrung führen, weil sehr häufig das Semikolon als Spaltentrennzeichen und der Punkt als Dezimaltrennzeichen verwendet werden. Die Ursache für diese Situation sind CSV-Dateien, die aus Excel exportiert wurden.\nDie normalerweise für dieses Format empfohlene Funktion read_csv2() behandelt Dezimalzahlen fälschlich als Ganzzahlen. Um dieses Problem zu beheben, sollte das Dezimaltrennzeichen laut Dokumentation wie folgt angepasst werden:\nread_csv2(datei_name, locale = local(decimal_mark = \".\"))\nDieser Aufruf funktioniert jedoch nicht!\nHier greift die Funktion read_delim(). Wird dieser Funktion nur ein Dateiname übergeben, dann prüft die Funktion auf die verschiedenen Trennzeichen. Dieser (undokumentierte) Algorithmus erkennt Schweizer CSV-Dateien korrekt.\nread_delim(datei_name)\nDieser Aufruf importiert die Werte wie erwartet.\n\n\nBei der modernen read_ Variante können wir uns leicht an der Dateiendung orientieren, um die richtige read_-Funktion auszuwählen.\nWenn eine Datei eingelesen wird, dann gibt die jeweilige read_-Funktion neben den Daten auch zurück, wie die Datei eingelesen wurde. Enthält die eingelesene Datei die erwarteten Spaltenüberschriften, dann wurde das richtige Dateiformat ausgewählt.\n\n\n6.1.2 Dateien mit einer Spalte\nCSV-Dateien können mit Komma oder Semikolon als Trennzeichen erstellt werden. Die Funktion read_delim() liest diese Dateien meistens korrekt ein. Falls eine Datei mit nur einem Datenvektor importiert werden muss, dann kann R das Spaltentrennzeichen nicht finden. In solchen Fälle muss die Datei mit der read_csv() oder read_csv2()-Funktion noch einmal eingelesen werden.\nFür Spalten mit Zeichenketten oder Ganzzahlen wird immer die Funktion read_csv() verwendet.\nFür Gleitkommazahlen erfolgt die Auswahl auf Grundlage des verwendeten Dezimaltrennzeichens. Wird der Dezimalpunkt verwendet, dann muss die Funktion read_csv() benutzt werden. Wird das Dezimalkomma verwendet, dann muss die Funktion read_csv2() eingesetzt werden.\n\n\nBeispiel 6.1 (Datei mit einer Spalte importieren) Mit dem Aufruf read_csv(\"beispieldaten.csv\") werden Daten mit einem Komma als Trennzeichen und mit Dezimalpunkt eingelesen.\nMit dem Aufruf read_csv2(\"beispieldaten.csv\") werden Daten mit einem Semikolon als Trennzeichen und mit Dezimalkomma eingelesen.\nIn beiden Fällen nutzen wir dieses Verhalten aus, um eine Stichprobe mit nur einer Spalte einzulesen.\n\n\n\n\n6.1.3 Excel Arbeitsmappen\n\n\n\n\n\n\nPraxis\n\n\n\nLiegen Daten in einer Excel Arbeitsmappe vor, dann muss diese Arbeitsmappe nicht in ein anderes Dateiformat umgewandelt werden, damit die Daten in R importiert werden können.\n\n\nIn Excel werden Daten in Arbeitsmappen organisiert. Es ist also möglich, mehr als eine Tabelle und darauf basierende Operationen in einer Datei zu speichern. Damit Daten aus Arbeitsmappen in R importiert werden können, müssen die Struktur der Arbeitsmappe bekannt sein.\nEine Excel Arbeitsmappe ist eine Datei, die üblicherweise auf .xlsx endet. Die Dateiendung signalisiert uns meistens die interne Organisation einer Datei. Interne Organisation einer Datei bedeutet, in welcher Folge die Daten in einer Datei auf der Festplatte abgelegt sind.\nNur das Dateiformat von .xlsx-Dateien unterstützt alle Funktionen von Excel und kann von R korrekt eingelesen werden\nDas Dateiformat wird in Excel im Speichern-Unter-Dialog festgelegt. Dieser Dialog erscheint in der Regel, wenn eine neue Arbeitsmappe das erste Mal gespeichert wird. Wenn im Start-Dialog von Excel einfach eine neue Arbeitsmappe erstellt wird, dann erzeugt Excel automatisch eine Arbeitsmappe im Excel-Format.\n\n\n\n\n\n\nMerke\n\n\n\nExcel-Dateien sind Dateien mit der Endung .xlsx oder .xlsund werden als Excel Arbeitsmappen bezeichnet. Nur Dateien mit dieser Endung können in R als Excel-Datei importiert werden.\n\n\nExcel Arbeitsmappen haben vier zentrale Strukturelemente:\n\nArbeitsblätter\nAdressbereiche\nZellenwerte\nZellenformeln\n\nJedes Arbeitsblatt einer Arbeitsmappe hat einen eindeutigen Namen.\nDie Adressbereiche sind in Zeilen und Spalten gegliedert. Wir finden Daten daher immer auf einem bestimmten Arbeitsblatt in einem bestimmten Adressbereich. Die konkrete Position der Daten in der Arbeitsmappe legen die Autoren willkürlich fest.\nJede Zelle eines Arbeitsblatts hat immer zwei gleichzeitige Zustände, die immer in einer Excel Arbeitsmappe gespeichert werden:\n\nJede Zelle hat einen Wert.\nJede Zelle hat eine Operation.\n\nAus diesen Strukturelementen ergeben sich zwei Konsequenzen:\n\nEin Arbeitsblatt kann mehr als eine Tabelle mit Daten enthalten.\nDie Daten müssen nicht am Anfang (d.h. in der ersten Zeile und ersten Spalte) eines Arbeitsblatts beginnen.\n\nUm mit den Daten in Excel Arbeitsmappen arbeiten zu können, müssen bekannt sein, auf welchem Arbeitsblatt und in welchem Adressbereich die Daten stehen.\n\n\n\n\n\n\nMerke\n\n\n\nTabellen sind keine Strukturelemente von Excel Arbeitsmappen, die in R zugänglich sind.\n\n\n\n\n\n\n\n\nAchtung\n\n\n\nWenn Excel Arbeitsmappen mit Excel geöffnet werden, dann berechnet Excel alle Operationen auf allen Arbeitsblättern neu. Damit werden die Werte in der Arbeitsmappe verändert.\nEs kommt also vor, dass sich eine Arbeitsmappe ändert, ohne dass eine Interaktion vorgenommen wurde. In diesen Fällen fragt Excel beim Schliessen der Arbeitsmappe, ob die Änderungen gespeichert werden sollen.\nWird eine Excel Arbeitsmappe in R (oder in einer anderen Programmiersprache) geöffnet, dann wird nur die Arbeitsmappe geöffnet ohne die Operationen neu zu berechnen.\n\n\nMit den Funktionen der readxl-Bibliothek können wir Excel Arbeitsmappen nach R importieren. Dabei sind zwei Funktionen von besonderer Bedeutung:\n\nexcel_sheets(dateiname) und\nread_excel(dateiname, sheet)\n\nMit der Funktion excel_sheets() können die vorhandenen Arbeitsblätter erkannt werden. Das Ergebnis dieser Funktion ist die Liste der Arbeitsblattnamen in einer Arbeitsmappe. Diese Funktion sollte vor dem Import von Daten zur Kontrolle der Arbeitsblattnamen verwendet werden.\nDie Funktion read_excel() erlaubt es einzelne Arbeitsblätter zu importieren. Wenn kein Arbeitsblattname für den Parameter sheet übergeben wird, dann nimmt die Funktion das aktive oder das erste Arbeitsblatt in der Arbeitsmappe.\nMit den readxl-Funktionen können keine Formeln aus den Zellen ausgelesen werden.\n\nBeispiel 6.2 (Excel-Arbeitsmappe importieren)  \nlibrary(readxl)\n\nArbeitsblaetter = excel_sheets(\"Bestellungen_2.xlsx\")\n# Das Arbeitsblatt \"Daten\" sollte vorhanden sein.\n\nDaten = read_excel(\"Bestellungen_2.xlsx\", \"Daten\")\n\nDie Funktion read_excel() importiert alle Daten auf einem Arbeitsblatt. Enthält nur ein bestimmter Bereich auf einem Arbeitsblatt die Daten von Interesse, dann muss dieser Bereich als Excel-Bereichsadresse angegeben werden.\n\n\n\n\n\n\nWarnung\n\n\n\nread_excel() kann nur mit Excels Arbeitsblattadressen umgehen. Tabellenadressen oder die Gatter-Notation beherrscht die Funktion nicht."
  },
  {
    "objectID": "kapitel/daten-importieren-exportieren/kapitel.html#daten-exportieren",
    "href": "kapitel/daten-importieren-exportieren/kapitel.html#daten-exportieren",
    "title": "6  Importieren und Exportieren",
    "section": "6.2 Daten exportieren",
    "text": "6.2 Daten exportieren\nR unterstützt den Export strukturierter Daten in Textdateien. Beim Exportieren kommen für die Formate TSV und CSV werden die entsprechenden Funktionen write_tsv(), write_csv() und write_csv2() benutzt. Für speziellformatierte Dateien kann die Funktion write_delim() eingesetzt werden.\nAlle Export-Funktionen erwarten eine Datenstruktur als ersten Parameter und einen Dateinamen als zweiten Parameter. Der Dateiname legt fest, wohin das Ergebnis der Funktion auf dem Computer geschrieben werden soll.\nDie Import- und Export-Funktionen lassen sich zu einfachen Konvertierungsprogrammen verknüpfen. Beispiel 6.3 korrigert von Excel exportierte CSV-Dateien in ein gültiges CSV-Format.\n\nBeispiel 6.3 (“Schweizer” CSV-Format korrigieren)  \nlibrary(readr)\n\nwrite_csv(\n    read_delim(\"Bestellungen_Excel.csv\"), \n    \"Bestellungen_korrigiert.csv\" \n)\n\n\n\n\n\n\n\nWarnung\n\n\n\nR kann Excel Arbeitsmappen nicht exportieren. Die readr-Funktionen write_excel_csv() und write_excel_csv2() exportieren CSV-Dateien mit einer zusätzlichen Markierung am Dateianfang. Diese Funktionen sollten nur verwendet werden, wenn eine CSV-Datei nur mit Excel importiert werden soll und nicht für die Archivierung oder Weiterverarbeitung gedacht ist.\nDie zusätzliche Markierung wird als Byte Order Mark (BOM) bezeichnet und muss das UTF8-Symbol FEFF sein. Dieses Symbol ist ein Leerzeichen ohne Länge und wird deshalb nie dargestellt. Excel bzw. Power Query verwenden das BOM, um UTF8-kodierte Dateien zu identifizieren."
  },
  {
    "objectID": "kapitel/daten-importieren-exportieren/kapitel.html#json-daten",
    "href": "kapitel/daten-importieren-exportieren/kapitel.html#json-daten",
    "title": "6  Importieren und Exportieren",
    "section": "6.3 JSON-Daten",
    "text": "6.3 JSON-Daten\nJSON ist ein Datenformat, dass von vielen sog. Web-Diensten zum Austausch von Datenstrukturen eingesetzt wird. R kann dieses Datenformat mit der tidyverse-Bibliothek jsonlite importieren und auch exportieren. jsonlite stellt zwei Funktionen für den regelmässigen Einsatz bereit:\n\nfromJSON()\ntoJSON()\n\nDie beiden Funktionen fromJSON() und toJSON() unterstützen das Parsen von und Serialisieren zu Zeichenketten im JSON-Format.\nUm Daten aus einer Textdatei im JSON-Format zu importieren, muss die gesamte Datei zuerst eingelesen werden und dann an den JSON-Parser fromJSON() übergeben werden.\n\nBeispiel 6.4 (JSON Daten aus einer Datei importieren)  \nlibrary(jsonlite)\n\nDaten = fromJSON(read_file(\"beispiele/daten.json\"))\n\nMit der Funktion toJSON() werden Daten in eine JSON-formatierte Zeichenkette umgewandelt. Diese Zeichenkette kann anschliessend mit write_file() in eine Datei geschrieben werden.\n\nBeispiel 6.5 (Daten im JSON-Format exportieren)  \nwrite_file(toJSON(Daten),\"neue_daten.json\"))\n\n\n\n\n\n\n\nHinweis\n\n\n\nDie beiden Funktionen read_json() und write_json() erlauben das Lesen und Schreiben von Textdateien im JSON-Format. Die Standardeinstellungen sind jedoch nicht identisch mit denen von fromJSON() und toJSON(), so dass der Import und Export mit diesen Funktionen komplexer ist, als mit der oben beschrieben Technik."
  },
  {
    "objectID": "kapitel/daten-importieren-exportieren/kapitel.html#festkodierte-daten",
    "href": "kapitel/daten-importieren-exportieren/kapitel.html#festkodierte-daten",
    "title": "6  Importieren und Exportieren",
    "section": "6.4 Festkodierte Daten",
    "text": "6.4 Festkodierte Daten\nR unterstützt den Import von festkodierten Daten nicht direkt. Festkodierte Daten benötigen einen eigenen Parser, der die Datenfelder extrahiert. Die prinzipielle Vorgehensweise ähnelt dem Import und Export von JSON-Daten. Dazu werden die Daten als unstrukturierte Textdaten mit der Funktion read_file() eingelesen. Anschliessend werden die Datenfelder mit Zeichenketten-Operationen (Kapitel 8) einzeln extrahiert. Beim Exportieren müssen die Daten zuerst serialisiert werden und anschliessend mit der Funktion write_file() in die entsprechende Datei geschrieben werden."
  },
  {
    "objectID": "kapitel/variablen/kapitel.html",
    "href": "kapitel/variablen/kapitel.html",
    "title": "7  Variablen, Funktionen und Operatoren",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/zeichenketten/kapitel.html",
    "href": "kapitel/zeichenketten/kapitel.html",
    "title": "8  Zeichenketten",
    "section": "",
    "text": "Work in Progress\n\n\n\n\n\n\nZeichenketten zerlegen\nString R"
  },
  {
    "objectID": "kapitel/faktoren/kapitel.html#section",
    "href": "kapitel/faktoren/kapitel.html#section",
    "title": "9  Faktoren",
    "section": "9.1 ",
    "text": "9.1"
  },
  {
    "objectID": "kapitel/datenströme/kapitel.html",
    "href": "kapitel/datenströme/kapitel.html",
    "title": "10  Datenströme",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/boolsche-operationen/kapitel.html",
    "href": "kapitel/boolsche-operationen/kapitel.html",
    "title": "11  Boole’sche Operationen",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/vektor-operationen/kapitel.html",
    "href": "kapitel/vektor-operationen/kapitel.html",
    "title": "12  Vektoroperationen",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/matrix-operationen/kapitel.html",
    "href": "kapitel/matrix-operationen/kapitel.html",
    "title": "13  Matrix-Operationen",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/indizieren-gruppieren/kapitel.html#indizieren",
    "href": "kapitel/indizieren-gruppieren/kapitel.html#indizieren",
    "title": "14  Indizieren und Gruppieren",
    "section": "14.1 Indizieren",
    "text": "14.1 Indizieren"
  },
  {
    "objectID": "kapitel/indizieren-gruppieren/kapitel.html#gruppieren",
    "href": "kapitel/indizieren-gruppieren/kapitel.html#gruppieren",
    "title": "14  Indizieren und Gruppieren",
    "section": "14.2 Gruppieren",
    "text": "14.2 Gruppieren"
  },
  {
    "objectID": "kapitel/daten-kodieren/kapitel.html#mit-faktoren-kodieren",
    "href": "kapitel/daten-kodieren/kapitel.html#mit-faktoren-kodieren",
    "title": "15  Daten kodieren",
    "section": "15.1 Mit Faktoren kodieren",
    "text": "15.1 Mit Faktoren kodieren"
  },
  {
    "objectID": "kapitel/daten-formen/kapitel.html",
    "href": "kapitel/daten-formen/kapitel.html",
    "title": "16  Daten formen",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/daten-beschreiben/kapitel.html",
    "href": "kapitel/daten-beschreiben/kapitel.html",
    "title": "17  Daten beschreiben",
    "section": "",
    "text": "Work in Progress"
  },
  {
    "objectID": "kapitel/daten-visualisieren/kapitel.html",
    "href": "kapitel/daten-visualisieren/kapitel.html",
    "title": "18  Daten visualisieren",
    "section": "",
    "text": "Work in Progress"
  }
]